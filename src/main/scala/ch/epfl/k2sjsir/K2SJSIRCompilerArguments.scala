package ch.epfl.k2sjsir

import kotlin.properties.ReadWriteProperty
import kotlin.reflect.KProperty
import org.jetbrains.kotlin.cli.common.arguments.K2JsArgumentConstants.MODULE_PLAIN
import org.jetbrains.kotlin.cli.common.arguments._

@SerialVersionUID(0L)
class K2SJSIRCompilerArguments extends CommonCompilerArguments {

  object Wrapper {
    implicit class StringWithFreezableVar[String](var str: String) extends ReadWriteProperty[Any, String] {
      override def getValue(thisRef: Any, property: KProperty[_]): String = this.str

      override def setValue(thisRef: Any, property: KProperty[_], value: String): Unit = {
        this.str = str
      }
    }
  }

  @GradleOption(classOf[DefaultValues.StringNullDefault])
  @Argument(value = "-d", description = "Destination for generated class files", valueDescription = "<directory|jar>")
  var destination: String = ""

  var destination$delegate = new FreezableVar[String](null)

  @Argument(value = "classpath", description = "Paths where to find user class files", valueDescription = "<path>")
  var classpath: String = _

  @GradleOption(classOf[DefaultValues.BooleanTrueDefault])
  @Argument(value = "-meta-info", description = "Generate .meta.js and .kjsm files with metadata. Use to create a library")
  var metaInfo: Boolean = _

  @GradleOption(classOf[DefaultValues.StringNullDefault])
  @Argument(value = "-output", description = "Output file path", valueDescription = "<path>")
  var outputFile : String = _


  @GradleOption(classOf[DefaultValues.BooleanFalseDefault])
  @Argument(value = "-source-map", description = "Generate source map")
  var sourceMap: Boolean = _

  @GradleOption(classOf[DefaultValues.JsModuleKinds])
  @Argument(
    value = "-module-kind",
    description = "Kind of a module generated by compiler",
    valueDescription = "{ plain, amd, commonjs, umd }"
  )
  var moduleKind : String = MODULE_PLAIN

  @GradleOption(classOf[DefaultValues.JsEcmaVersions])
  @Argument(value = "target", description = "Generate JS files for specific ECMA version", valueDescription = "{ v5 }")
  var target: String = _

  @GradleOption(classOf[DefaultValues.BooleanTrueDefault])
  @Argument(value = "no-stdlib", description = "Don't include Kotlin runtime into classpath")
  var noStdlib: Boolean = false

  @Argument(value = "kotlin-home", description = "Path to Kotlin compiler home directory, used for runtime libraries discovery", valueDescription = "<path>")
  var kotlinHome: String = _

  /* Added from K2JSCompilerArguments */

  @Argument(value = "libraries", description = "Paths to Kotlin libraries with .meta.js and .kjsm files, separated by system file separator", valueDescription = "<path>")
  var libraries: String = _

  @GradleOption(classOf[DefaultValues.JsMain])
  @Argument(value = "main", description = "Whether a main function should be called", valueDescription =  "{call, noCall}")
  var main: String = _

  // Paths to output directories for friend modules.
  var friendPaths: Array[String] = _

}